<Window
	x:Class="XamGridNullCellStyle.MainWindow"
	x:Name="ThisWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:local="clr-namespace:XamGridNullCellStyle"
	xmlns:ig="http://schemas.infragistics.com/xaml"
	xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	mc:Ignorable="d"
	Title="XamGrid with NULL cell style"
	Height="400" Width="400"
>
	<Window.DataContext>
		<local:MainViewModel/>
	</Window.DataContext>
	<Window.Resources>
		<!-- Converter used to check for null values -->
		<local:IsNullConverter x:Key="IsNullConverter"/>

		<!-- Background color for null values -->
		<!--<SolidColorBrush x:Key="NullCellBrush" Color="#FFFFFFE1"/>-->
		<SolidColorBrush x:Key="NullCellBrush" Color="{Binding Path=DataContext.NullBackgroundColor, ElementName=ThisWindow}"/>

		<!--
		Technically, this doesn't apply the style to null (or DBNull.Value) values,
		but instead applies the style to empty strings by binding to the Text property
		of the TextBlock generated by the DataGridTextColumn. It would be nice to be
		use the actual column binding and to be able to distinguish between null,
		empty, or either.
		-->
		<Style x:Key="EmptyTextBlock" TargetType="{x:Type TextBlock}">
			<Style.Triggers>
				<Trigger Property="Text" Value="">
					<Setter Property="Background" Value="{StaticResource NullCellBrush}"/>
				</Trigger>
			</Style.Triggers>
			<!--
			<Setter Property="Text" Value="{Binding}"/>
			<Style.Triggers>
				<DataTrigger Binding="{Binding}" Value="{x:Static sys:String.Empty}">
					<Setter Property="Background" Value="{StaticResource NullCellBrush}"/>
					<Setter Property="Text" Value="NULL"/>
				</DataTrigger>
				<DataTrigger Binding="{Binding}" Value="{x:Null}">
					<Setter Property="Background" Value="{StaticResource NullCellBrush}"/>
					<Setter Property="Text" Value="NULL"/>
				</DataTrigger>
			</Style.Triggers>
			-->
			<!-- This causes the trigger to behave strangely and stops most of the styling
			<Setter Property="HorizontalAlignment" Value="Right"/>
			-->
		</Style>

		<Style x:Key="NullCellStyle" TargetType="{x:Type ig:CellControl}">
			<Style.Triggers>
				<!--
				Instead of a hardcoded binding to "Row[A]", use CellControl.Cell.Value
				-->
				<DataTrigger Binding="{Binding Cell.Value, RelativeSource={RelativeSource Self}, Converter={StaticResource IsNullConverter}}" Value="True">
					<Setter Property="FontSize" Value="11"/>
					<Setter Property="VerticalContentAlignment" Value="Center"/>
					<Setter Property="Background" Value="{StaticResource NullCellBrush}"/>
					<Setter Property="BorderBrush" Value="#FFC9CACA"/>
					<Setter Property="BorderThickness" Value="0,0,1,0"/>
					<Setter Property="HorizontalContentAlignment" Value="Left"/>
					<Setter Property="Padding" Value="5"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ig:CellControl}">
								<Grid>
									<VisualStateManager.VisualStateGroups>
										<VisualStateGroup x:Name="CommonStates">
											<VisualState x:Name="Normal"/>
											<VisualState x:Name="MouseOver">
												<Storyboard>
													<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="AltMouseOver">
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<SolidColorBrush Color="#FFE6EFF7"/>
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</VisualState>
											<VisualState x:Name="Alternate">
												<Storyboard>
													<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="AltMouseOver">
														<DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource NullCellBrush}"/>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</VisualState>
										</VisualStateGroup>
										<VisualStateGroup x:Name="SelectedStates">
											<VisualState x:Name="NotSelected"/>
											<VisualState x:Name="Selected">
												<Storyboard>
													<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="ActiveSelected">
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<SolidColorBrush Color="#FFD5EAF2"/>
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
													<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="BorderThickness" Storyboard.TargetName="ActiveSelected">
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<Thickness>0,0,1,0</Thickness>
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</VisualState>
										</VisualStateGroup>
										<VisualStateGroup x:Name="ActiveStates">
											<VisualState x:Name="InActive"/>
											<VisualState x:Name="Active">
												<Storyboard>
													<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="BorderThickness" Storyboard.TargetName="ActiveSelected">
														<DiscreteObjectKeyFrame KeyTime="0">
															<DiscreteObjectKeyFrame.Value>
																<Thickness>1</Thickness>
															</DiscreteObjectKeyFrame.Value>
														</DiscreteObjectKeyFrame>
													</ObjectAnimationUsingKeyFrames>
												</Storyboard>
											</VisualState>
										</VisualStateGroup>
									</VisualStateManager.VisualStateGroups>
									<Border x:Name="Root" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
									<Rectangle x:Name="AltMouseOver" Margin="{TemplateBinding BorderThickness}"/>
									<Border x:Name="ActiveSelected" BorderBrush="#FF6DBDD1"/>
									<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
								</Grid>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</DataTrigger>
			</Style.Triggers>
		</Style>

		<ContextMenu x:Key="CellContextMenu">
			<MenuItem Header="Cut" Command="ApplicationCommands.Cut" />
			<MenuItem Header="Copy" Command="ApplicationCommands.Copy" />
			<MenuItem Header="Paste" Command="ApplicationCommands.Paste" />
		</ContextMenu>
		<ContextMenu x:Key="HeaderContextMenu">
			<MenuItem Header="Test" />
			<MenuItem Header="Copy" Command="ApplicationCommands.Copy" />
			<MenuItem Header="Paste" Command="ApplicationCommands.Paste" />
		</ContextMenu>
		<Style x:Key="DataGridHeaderContextMenu" TargetType="{x:Type DataGridColumnHeader}">
			<Setter Property="ContextMenu" Value="{StaticResource HeaderContextMenu}"/>
		</Style>
	</Window.Resources>
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="*"/>
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
		</Grid.RowDefinitions>

		<Grid Grid.ColumnSpan="3" Grid.Row="0">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>
			<TextBlock Grid.Column="0" Text="NULL Background Color" VerticalAlignment="Center"/>
			<ig:XamColorPicker Grid.Column="1" Margin="5,0,5,0" MinWidth="50" SelectedColor="{Binding NullBackgroundColor, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
		</Grid>

		<Grid Grid.Column="0" Grid.Row="1">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>
			<TextBlock Text="DataGrid with DataView" Grid.Column="0" Grid.Row="0" />
			<DataGrid x:Name="DataGridWithDataView"
					  Grid.Row="1"
					  ContextMenu="{StaticResource CellContextMenu}"
					  AutoGenerateColumns="False"
					  CanUserAddRows="False"
					  CanUserDeleteRows="False"
					  IsTextSearchEnabled="True"
					  IsTextSearchCaseSensitive="False"
					  HorizontalGridLinesBrush="LightGray"
					  VerticalGridLinesBrush="LightGray"
					  ItemsSource="{Binding DataView}">
				<DataGrid.Resources>
					<Style TargetType="{x:Type DataGridColumnHeader}">
						<Setter Property="ContextMenu" Value="{StaticResource HeaderContextMenu}" />
					</Style>
				</DataGrid.Resources>
				<!-- This doesn't work because the Binding is explicitly set to Value. It needs to evaluate the DataGridColumn Binding.
				<DataGrid.CellStyle>
					<Style TargetType="{x:Type DataGridCell}">
						<Style.Triggers>
							<DataTrigger Binding="{Binding Path=Value, Converter={StaticResource IsNullConverter}}" Value="True">
								<Setter Property="Background" Value="{StaticResource NullCellBrush}"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</DataGrid.CellStyle>
				-->
				<DataGrid.Columns>
					<DataGridTextColumn Header="A" Binding="{Binding A}" Width="Auto" ElementStyle="{StaticResource EmptyTextBlock}"/>
					<DataGridTextColumn Header="B" Binding="{Binding B}" Width="Auto" ElementStyle="{StaticResource EmptyTextBlock}"/>
					<DataGridTextColumn Header="C" Binding="{Binding C}" Width="Auto" ElementStyle="{StaticResource EmptyTextBlock}"/>
					<DataGridTextColumn Header="D" Binding="{Binding D}" Width="Auto" ElementStyle="{StaticResource EmptyTextBlock}"/>
				</DataGrid.Columns>
			</DataGrid>
		</Grid>

		<Grid Grid.Column="2" Grid.Row="1">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>
			<TextBlock Text="DataGrid with ViewModel" Grid.Column="0" Grid.Row="0" />
			<DataGrid x:Name="DataGridWithViewModel"
					  Grid.Row="1"
					  ContextMenu="{StaticResource CellContextMenu}"
					  AutoGenerateColumns="False"
					  CanUserAddRows="False"
					  CanUserDeleteRows="False"
					  IsTextSearchEnabled="True"
					  IsTextSearchCaseSensitive="False"
					  HorizontalGridLinesBrush="LightGray"
					  VerticalGridLinesBrush="LightGray"
					  ItemsSource="{Binding TestData}">
				<DataGrid.Resources>
					<Style TargetType="{x:Type DataGridColumnHeader}">
						<Setter Property="ContextMenu" Value="{StaticResource HeaderContextMenu}" />
					</Style>
				</DataGrid.Resources>
				<DataGrid.Columns>
					<DataGridTextColumn Header="A" Binding="{Binding A}" Width="Auto">
						<DataGridTextColumn.ElementStyle>
							<Style TargetType="{x:Type TextBlock}">
								<Style.Triggers>
									<Trigger Property="Text" Value="">
										<Setter Property="Background" Value="{StaticResource NullCellBrush}"/>
									</Trigger>
								</Style.Triggers>
							</Style>
						</DataGridTextColumn.ElementStyle>
					</DataGridTextColumn>
					<DataGridTextColumn Header="B" Binding="{Binding B}" Width="Auto" ElementStyle="{StaticResource EmptyTextBlock}"/>
					<DataGridTextColumn Header="C" Binding="{Binding C}" Width="Auto" ElementStyle="{StaticResource EmptyTextBlock}"/>
					<DataGridTextColumn Header="D" Binding="{Binding D}" Width="Auto" ElementStyle="{StaticResource EmptyTextBlock}"/>
				</DataGrid.Columns>
			</DataGrid>
		</Grid>

		<Grid Grid.Column="0" Grid.Row="3">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>
			<TextBlock Text="XamGrid with DataView" Grid.Column="0" Grid.Row="0" />
			<ig:XamGrid x:Name="GridWithDataView"
						Grid.Column="0" Grid.Row="1"
						ContextMenu="{StaticResource CellContextMenu}"
						SnapsToDevicePixels="True"
						ItemsSource="{Binding DataView}"
						CellStyle="{StaticResource NullCellStyle}">
				<ig:XamGrid.Resources>
					<Style x:Key="MouseRightButtonDown" TargetType="{x:Type ig:CellControl}">
						<EventSetter Event="MouseRightButtonDown" Handler="Cell_MouseRightButtonDown"/>
					</Style>
				</ig:XamGrid.Resources>
				<!--
				<ig:XamGrid.GroupBySettings>
					<ig:GroupBySettings AllowGroupByArea="Top"/>
				</ig:XamGrid.GroupBySettings>
				<ig:XamGrid.FilteringSettings>
					<ig:FilteringSettings AllowFiltering="FilterRowTop"/>
				</ig:XamGrid.FilteringSettings>
				-->
				<ig:XamGrid.Columns>
					<ig:TextColumn Key="A"/>
					<ig:TextColumn Key="B"/>
					<ig:TextColumn Key="C"/>
					<ig:TextColumn Key="D"/>
				</ig:XamGrid.Columns>
			</ig:XamGrid>
		</Grid>

		<Grid Grid.Column="2" Grid.Row="3">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>
			<TextBlock Text="XamGrid with ViewModel" Grid.Row="0" />
			<ig:XamGrid x:Name="GridWithViewModel"
					Grid.Row="1"
					ContextMenu="{StaticResource CellContextMenu}"
					SnapsToDevicePixels="True"
					ItemsSource="{Binding TestData}">
				<ig:XamGrid.Resources>
					<Style TargetType="{x:Type igPrim:HeaderCellControl}">
						<Setter Property="ContextMenu" Value="{StaticResource HeaderContextMenu}" />
					</Style>
					<Style x:Key="MouseRightButtonDown" TargetType="{x:Type ig:CellControl}">
						<EventSetter Event="MouseRightButtonDown" Handler="Cell_MouseRightButtonDown"/>
					</Style>

					<Style x:Key="NullCellStyle" TargetType="{x:Type ig:CellControl}">
						<Style.Triggers>
							<!--
							Instead of a hardcoded binding to "A", use CellControl.Cell.Value
							-->
							<DataTrigger Binding="{Binding Cell.Value, RelativeSource={RelativeSource Self}, Converter={StaticResource IsNullConverter}}" Value="True">
								<Setter Property="FontSize" Value="11"/>
								<Setter Property="VerticalContentAlignment" Value="Center"/>
								<Setter Property="Background" Value="{StaticResource NullCellBrush}"/>
								<Setter Property="BorderBrush" Value="#FFC9CACA"/>
								<Setter Property="BorderThickness" Value="0,0,1,0"/>
								<Setter Property="HorizontalContentAlignment" Value="Left"/>
								<Setter Property="Padding" Value="5"/>
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type ig:CellControl}">
											<Grid>
												<VisualStateManager.VisualStateGroups>
													<VisualStateGroup x:Name="CommonStates">
														<VisualState x:Name="Normal"/>
														<VisualState x:Name="MouseOver">
															<Storyboard>
																<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="AltMouseOver">
																	<DiscreteObjectKeyFrame KeyTime="0">
																		<DiscreteObjectKeyFrame.Value>
																			<SolidColorBrush Color="#FFE6EFF7"/>
																		</DiscreteObjectKeyFrame.Value>
																	</DiscreteObjectKeyFrame>
																</ObjectAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
														<VisualState x:Name="Alternate">
															<Storyboard>
																<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="AltMouseOver">
																	<DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource NullCellBrush}"/>
																</ObjectAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
													</VisualStateGroup>
													<VisualStateGroup x:Name="SelectedStates">
														<VisualState x:Name="NotSelected"/>
														<VisualState x:Name="Selected">
															<Storyboard>
																<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="ActiveSelected">
																	<DiscreteObjectKeyFrame KeyTime="0">
																		<DiscreteObjectKeyFrame.Value>
																			<SolidColorBrush Color="#FFD5EAF2"/>
																		</DiscreteObjectKeyFrame.Value>
																	</DiscreteObjectKeyFrame>
																</ObjectAnimationUsingKeyFrames>
																<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="BorderThickness" Storyboard.TargetName="ActiveSelected">
																	<DiscreteObjectKeyFrame KeyTime="0">
																		<DiscreteObjectKeyFrame.Value>
																			<Thickness>0,0,1,0</Thickness>
																		</DiscreteObjectKeyFrame.Value>
																	</DiscreteObjectKeyFrame>
																</ObjectAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
													</VisualStateGroup>
													<VisualStateGroup x:Name="ActiveStates">
														<VisualState x:Name="InActive"/>
														<VisualState x:Name="Active">
															<Storyboard>
																<ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0" Storyboard.TargetProperty="BorderThickness" Storyboard.TargetName="ActiveSelected">
																	<DiscreteObjectKeyFrame KeyTime="0">
																		<DiscreteObjectKeyFrame.Value>
																			<Thickness>1</Thickness>
																		</DiscreteObjectKeyFrame.Value>
																	</DiscreteObjectKeyFrame>
																</ObjectAnimationUsingKeyFrames>
															</Storyboard>
														</VisualState>
													</VisualStateGroup>
												</VisualStateManager.VisualStateGroups>
												<Border x:Name="Root" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
												<Rectangle x:Name="AltMouseOver" Margin="{TemplateBinding BorderThickness}"/>
												<Border x:Name="ActiveSelected" BorderBrush="#FF6DBDD1"/>
												<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
											</Grid>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</ig:XamGrid.Resources>
				<!--
			<ig:XamGrid.GroupBySettings>
				<ig:GroupBySettings AllowGroupByArea="Top"/>
			</ig:XamGrid.GroupBySettings>
			<ig:XamGrid.FilteringSettings>
				<ig:FilteringSettings AllowFiltering="FilterRowTop"/>
			</ig:XamGrid.FilteringSettings>
			-->
				<ig:XamGrid.Columns>
					<ig:TextColumn Key="A" CellStyle="{StaticResource NullCellStyle}"/>
					<ig:TextColumn Key="B" CellStyle="{StaticResource NullCellStyle}"/>
					<ig:TextColumn Key="C" CellStyle="{StaticResource NullCellStyle}"/>
					<ig:TextColumn Key="D" CellStyle="{StaticResource NullCellStyle}"/>
				</ig:XamGrid.Columns>
			</ig:XamGrid>
		</Grid>

		<GridSplitter Focusable="False"
					  HorizontalAlignment="Right"
					  VerticalAlignment="Stretch"
					  Grid.Column="1"
					  Grid.Row="1"
					  Grid.RowSpan="3"
					  ResizeBehavior="PreviousAndNext"
					  Width="5" />

		<GridSplitter Focusable="False"
					  HorizontalAlignment="Stretch"
					  VerticalAlignment="Top"
					  Grid.ColumnSpan="3"
					  Grid.Row="2"
					  ResizeBehavior="PreviousAndNext"
					  Height="5" />
	</Grid>
</Window>
